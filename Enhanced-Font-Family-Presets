// ==UserScript==
// @name         T√πy ch·ªânh font + l∆∞u + UI g·ªçn + b·∫≠t/t·∫Øt t·ª´ng t√πy ch·ªçn
// @namespace    http://tampermonkey.net/
// @version      1.4
// @description  T√πy ch·ªânh font, m√†u, n·ªÅn, vi·ªÅn ch·ªØ v√† l∆∞u theo t√™n mi·ªÅn v·ªõi giao di·ªán g·ªçn g√†ng v√† b·∫≠t/t·∫Øt t·ª´ng t√πy ch·ªçn
// @author       
// @match        *://*/*
// @grant        GM_addStyle
// ==/UserScript==

(function() {
    'use strict';

    const domain = location.hostname;
    const storageKey = `fontStyle_${domain}`;

    // N√∫t b·∫≠t/t·∫Øt UI
    const toggleBtn = document.createElement('button');
    toggleBtn.textContent = 'üé® Font Tool';
    toggleBtn.style = `
        position:fixed;
        top:10px;
        right:10px;
        z-index:9999;
        background:#0078d4;
        color:#fff;
        border:none;
        padding:6px 10px;
        border-radius:5px;
        cursor:pointer;
        font-size:14px;
    `;
    document.body.appendChild(toggleBtn);

    // Giao di·ªán ƒëi·ªÅu khi·ªÉn
    const panel = document.createElement('div');
    panel.style = `
        position:fixed;
        top:50px;
        right:10px;
        z-index:9999;
        background:#fff;
        border:1px solid #ccc;
        padding:10px;
        font-family:sans-serif;
        width:270px;
        max-height:300px;
        overflow-y:auto;
        display:none;
        box-shadow:0 2px 8px rgba(0,0,0,0.2);
        border-radius:6px;
    `;
    panel.innerHTML = `
        <h4 style="margin-top:0;">T√πy ch·ªânh font</h4>
        <label>Ph·∫ßn t·ª≠ (p, .class, #id):</label><br>
        <input type="text" id="selector" style="width:100%;"><br><br>

        <label><input type="checkbox" id="enableFontSize"> C·ª° ch·ªØ (px):</label><br>
        <input type="number" id="fontsize" style="width:100%;" value="16"><br><br>

        <label><input type="checkbox" id="enableFontColor"> M√†u ch·ªØ:</label><br>
        <input type="color" id="fontcolor" style="width:100%;"><br><br>

        <label><input type="checkbox" id="enableBgColor"> N·ªÅn ch·ªØ:</label><br>
        <input type="color" id="bgcolor" style="width:100%;"><br><br>

        <label><input type="checkbox" id="enableTextStroke"> Vi·ªÅn ch·ªØ (v√≠ d·ª•: 1px black):</label><br>
        <input type="text" id="textstroke" style="width:100%;" placeholder="1px black"><br><br>

        <label><input type="checkbox" id="enableFontName"> T√™n font (Google Fonts):</label><br>
        <input type="text" id="fontname" style="width:100%;" placeholder="Roboto"><br><br>

        <label><input type="checkbox" id="saveDomain"> L∆∞u cho t√™n mi·ªÅn n√†y</label><br><br>

        <button id="applyStyle" style="width:100%;">√Åp d·ª•ng</button>
    `;
    document.body.appendChild(panel);

    toggleBtn.addEventListener('click', () => {
        panel.style.display = panel.style.display === 'none' ? 'block' : 'none';
    });

    function loadGoogleFont(fontName) {
        if (!fontName) return;
        const link = document.createElement('link');
        link.href = `https://fonts.googleapis.com/css2?family=${fontName.replace(/ /g, '+')}&display=swap`;
        link.rel = 'stylesheet';
        document.head.appendChild(link);
    }

    function applyStyle(config) {
        if (!config.selector) return;

        let style = `${config.selector} {`;

        if (config.enableFontSize) {
            style += `font-size: ${config.fontSize}px !important;`;
        }
        if (config.enableFontColor) {
            style += `color: ${config.fontColor} !important;`;
        }
        if (config.enableBgColor) {
            style += `background-color: ${config.bgColor} !important;`;
        }
        if (config.enableFontName) {
            style += `font-family: '${config.fontName}', sans-serif !important;`;
            loadGoogleFont(config.fontName);
        }
        if (config.enableTextStroke) {
            style += `-webkit-text-stroke: ${config.textStroke} !important;`;
        }

        style += `}`;
        GM_addStyle(style);
    }

    // T·∫£i c·∫•u h√¨nh n·∫øu c√≥
    const saved = localStorage.getItem(storageKey);
    if (saved) {
        const config = JSON.parse(saved);
        applyStyle(config);
        document.getElementById('selector').value = config.selector;
        document.getElementById('fontsize').value = config.fontSize;
        document.getElementById('fontcolor').value = config.fontColor;
        document.getElementById('bgcolor').value = config.bgColor;
        document.getElementById('textstroke').value = config.textStroke;
        document.getElementById('fontname').value = config.fontName;
        document.getElementById('enableFontSize').checked = config.enableFontSize;
        document.getElementById('enableFontColor').checked = config.enableFontColor;
        document.getElementById('enableBgColor').checked = config.enableBgColor;
        document.getElementById('enableTextStroke').checked = config.enableTextStroke;
        document.getElementById('enableFontName').checked = config.enableFontName;
        document.getElementById('saveDomain').checked = true;
    }

    document.getElementById('applyStyle').addEventListener('click', () => {
        const config = {
            selector: document.getElementById('selector').value.trim(),
            fontSize: document.getElementById('fontsize').value.trim(),
            fontColor: document.getElementById('fontcolor').value.trim(),
            bgColor: document.getElementById('bgcolor').value.trim(),
            textStroke: document.getElementById('textstroke').value.trim(),
            fontName: document.getElementById('fontname').value.trim(),
            enableFontSize: document.getElementById('enableFontSize').checked,
            enableFontColor: document.getElementById('enableFontColor').checked,
            enableBgColor: document.getElementById('enableBgColor').checked,
            enableTextStroke: document.getElementById('enableTextStroke').checked,
            enableFontName: document.getElementById('enableFontName').checked
        };

        applyStyle(config);

        if (document.getElementById('saveDomain').checked) {
            localStorage.setItem(storageKey, JSON.stringify(config));
        } else {
            localStorage.removeItem(storageKey);
        }
    });
  
})();
