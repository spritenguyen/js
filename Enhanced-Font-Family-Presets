// ==UserScript==
// @name         T√πy ch·ªânh font + l∆∞u + UI g·ªçn + b·∫≠t/t·∫Øt + nh·∫≠p/xu·∫•t
// @namespace    http://tampermonkey.net/
// @version      1.6
// @description  T√πy ch·ªânh font, m√†u, n·ªÅn, vi·ªÅn ch·ªØ. Neo √¥ ch·ªçn ph·∫ßn t·ª≠ (sticky), UI n·ªïi kh·ªëi. L∆∞u theo t√™n mi·ªÅn. Nh·∫≠p/Xu·∫•t c·∫•u h√¨nh JSON nhanh ch√≥ng.
// @author       Copilot
// @match        *://*/*
// @grant        GM_addStyle
// ==/UserScript==

(function () {
  'use strict';

  const domain = location.hostname;
  const storageKey = `fontStyle_${domain}`;
  const styleElId = `cpl-style-${domain}`;

  // ========== Styles (UI ƒë·∫πp + n·ªïi kh·ªëi + sticky) ==========
  GM_addStyle(`
    :root {
      --cpl-accent: #0078d4;
      --cpl-accent-2: #0a64a0;
      --cpl-bg: #f5f7fb;
      --cpl-panel-bg: #ffffffcc;
      --cpl-text: #1a1f36;
      --cpl-border: #e6e9ef;
      --cpl-shadow-1: 0 6px 18px rgba(16,24,40,.12);
      --cpl-shadow-2: 0 2px 6px rgba(16,24,40,.08);
    }
    .cpl-toggle-btn {
      position: fixed; top: 12px; right: 12px;
      z-index: 2147483647;
      background: var(--cpl-accent); color: #fff; border: none;
      padding: 8px 12px; border-radius: 10px; cursor: pointer;
      font: 600 13px/1.2 ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial;
      box-shadow: var(--cpl-shadow-2);
      transition: transform .08s ease, box-shadow .2s ease, background .2s ease;
    }
    .cpl-toggle-btn:hover { background: var(--cpl-accent-2); box-shadow: var(--cpl-shadow-1); transform: translateY(-1px); }
    .cpl-toggle-btn:active { transform: translateY(0); }

    .cpl-panel {
      position: fixed; top: 56px; right: 12px;
      z-index: 2147483647;
      width: 300px; max-height: 440px;
      background: var(--cpl-panel-bg);
      backdrop-filter: blur(8px); -webkit-backdrop-filter: blur(8px);
      border: 1px solid var(--cpl-border);
      box-shadow: var(--cpl-shadow-1);
      border-radius: 14px; overflow: hidden; display: none;
      color: var(--cpl-text);
      font: 500 13px/1.45 ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial;
    }
    .cpl-panel-inner {
      padding: 12px; max-height: 440px; overflow-y: auto;
      background: linear-gradient(180deg, rgba(255,255,255,.92), rgba(255,255,255,.86));
    }
    .cpl-title { margin: 0 0 8px 0; font-size: 14px; font-weight: 700; letter-spacing: .1px; }

    /* Sticky block: label tr√™n, input d∆∞·ªõi, neo ƒë·ªânh panel */
    .cpl-sticky {
      position: sticky; top: 0; z-index: 2;
      background: #ffffffee;
      border: 1px solid var(--cpl-border); border-radius: 10px;
      padding: 10px; margin: 0 0 10px 0;
      box-shadow: 0 3px 8px rgba(16,24,40,.06);
    }
    .cpl-label { display: block; font-weight: 700; margin-bottom: 6px; }

    .cpl-input, .cpl-input[type="number"], .cpl-input[type="text"], .cpl-input[type="color"] {
      width: 100%; box-sizing: border-box;
      padding: 8px 10px; border-radius: 10px;
      border: 1px solid var(--cpl-border); background: #fff; color: var(--cpl-text);
      outline: none; box-shadow: inset 0 1px 0 rgba(16,24,40,.03);
      transition: border .2s ease, box-shadow .2s ease;
    }
    .cpl-input:focus { border-color: var(--cpl-accent); box-shadow: 0 0 0 3px rgba(0,120,212,.12); }

    .cpl-section {
      border: 1px solid var(--cpl-border); border-radius: 12px;
      padding: 10px; margin-bottom: 10px; background: #fff;
      box-shadow: 0 2px 10px rgba(16,24,40,.06);
    }
    .cpl-checkline { display: flex; align-items: center; gap: 8px; margin-bottom: 8px; user-select: none; }
    .cpl-grid { display: grid; grid-template-columns: 1fr; gap: 8px; }
    .cpl-muted { color: #4b5565; font-weight: 600; }

    .cpl-btn {
      width: 100%; color: #fff; border: none; padding: 10px 12px; border-radius: 12px;
      font-weight: 700; cursor: pointer; box-shadow: var(--cpl-shadow-2);
      transition: transform .08s ease, box-shadow .2s ease, filter .2s ease;
    }
    .cpl-btn:hover { filter: brightness(1.03); box-shadow: var(--cpl-shadow-1); transform: translateY(-1px); }
    .cpl-btn:active { transform: translateY(0); }
    .cpl-btn-primary { background: linear-gradient(180deg, #0b84e5, #0078d4); }
    .cpl-btn-green { background: linear-gradient(180deg, #18b25e, #0ea44e); }
    .cpl-btn-orange { background: linear-gradient(180deg, #ffa552, #ff8c00); }

    .cpl-actions { display: flex; gap: 6px; margin-bottom: 10px; }
    .cpl-panel-inner::-webkit-scrollbar { width: 10px; }
    .cpl-panel-inner::-webkit-scrollbar-track { background: transparent; }
    .cpl-panel-inner::-webkit-scrollbar-thumb {
      background: #d9dee7; border-radius: 10px; border: 2px solid transparent; background-clip: content-box;
    }
  `);

  // ========== Toggle button ==========
  const toggleBtn = document.createElement('button');
  toggleBtn.textContent = 'üé® Font Tool';
  toggleBtn.className = 'cpl-toggle-btn';
  document.body.appendChild(toggleBtn);

  // ========== Panel ==========
  const panel = document.createElement('div');
  panel.className = 'cpl-panel';
  panel.innerHTML = `
    <div class="cpl-panel-inner">
      <h4 class="cpl-title">T√πy ch·ªânh font</h4>

      <!-- Sticky selector -->
      <div class="cpl-sticky">
        <label for="selector" class="cpl-label">Ph·∫ßn t·ª≠ (p, .class, #id):</label>
        <input type="text" id="selector" class="cpl-input" placeholder="p, .class, #id">
      </div>

      <div class="cpl-section">
        <div class="cpl-grid">
          <div>
            <label class="cpl-checkline">
              <input type="checkbox" id="enableFontSize">
              <span class="cpl-muted">C·ª° ch·ªØ (px)</span>
            </label>
            <input type="number" id="fontsize" class="cpl-input" value="16" min="1">
          </div>

          <div>
            <label class="cpl-checkline">
              <input type="checkbox" id="enableFontColor">
              <span class="cpl-muted">M√†u ch·ªØ</span>
            </label>
            <input type="color" id="fontcolor" class="cpl-input" value="#000000">
          </div>

          <div>
            <label class="cpl-checkline">
              <input type="checkbox" id="enableBgColor">
              <span class="cpl-muted">N·ªÅn ch·ªØ</span>
            </label>
            <input type="color" id="bgcolor" class="cpl-input" value="#ffffff">
          </div>

          <div>
            <label class="cpl-checkline">
              <input type="checkbox" id="enableTextStroke">
              <span class="cpl-muted">Vi·ªÅn ch·ªØ (v√≠ d·ª•: 1px black)</span>
            </label>
            <input type="text" id="textstroke" class="cpl-input" placeholder="1px black">
          </div>

          <div>
            <label class="cpl-checkline">
              <input type="checkbox" id="enableFontName">
              <span class="cpl-muted">T√™n font (Google Fonts)</span>
            </label>
            <input type="text" id="fontname" class="cpl-input" placeholder="Roboto">
          </div>

          <div class="cpl-checkline" style="margin-top:4px;">
            <input type="checkbox" id="saveDomain" checked>
            <span class="cpl-muted">L∆∞u cho t√™n mi·ªÅn n√†y</span>
          </div>
        </div>
      </div>

      <div class="cpl-actions">
        <button id="exportConfig" class="cpl-btn cpl-btn-green">üì§ Xu·∫•t</button>
        <button id="importConfig" class="cpl-btn cpl-btn-orange">üì• Nh·∫≠p</button>
      </div>

      <button id="applyStyle" class="cpl-btn cpl-btn-primary">√Åp d·ª•ng</button>
    </div>
  `;
  document.body.appendChild(panel);

  // ========== Helpers ==========
  const $ = (id) => document.getElementById(id);

  function ensureStyleEl() {
    let el = document.getElementById(styleElId);
    if (!el) {
      el = document.createElement('style');
      el.id = styleElId;
      document.head.appendChild(el);
    }
    return el;
  }

  function loadGoogleFont(fontName) {
    if (!fontName) return;
    const id = `cpl-gf-${fontName.replace(/\s+/g, '-')}`;
    if (document.getElementById(id)) return;
    const link = document.createElement('link');
    link.id = id;
    link.href = `https://fonts.googleapis.com/css2?family=${encodeURIComponent(fontName).replace(/%20/g, '+')}&display=swap`;
    link.rel = 'stylesheet';
    document.head.appendChild(link);
  }

  function buildCss(config) {
    if (!config.selector) return '';
    let css = `${config.selector} {`;
    if (config.enableFontSize && config.fontSize) css += `font-size: ${config.fontSize}px !important;`;
    if (config.enableFontColor && config.fontColor) css += `color: ${config.fontColor} !important;`;
    if (config.enableBgColor && config.bgColor) css += `background-color: ${config.bgColor} !important;`;
    if (config.enableFontName && config.fontName) css += `font-family: '${config.fontName}', sans-serif !important;`;
    if (config.enableTextStroke && config.textStroke) css += `-webkit-text-stroke: ${config.textStroke} !important;`;
    css += `}`;
    return css;
  }

  function applyStyle(config) {
    if (!config || !config.selector) return;
    const el = ensureStyleEl();
    el.textContent = buildCss(config);
    if (config.enableFontName && config.fontName) loadGoogleFont(config.fontName);
  }

  function getUIConfig() {
    const fontSizeVal = parseInt($('fontsize').value, 10);
    return {
      selector: $('selector').value.trim(),
      fontSize: Number.isFinite(fontSizeVal) ? fontSizeVal : 16,
      fontColor: $('fontcolor').value.trim() || '#000000',
      bgColor: $('bgcolor').value.trim() || '#ffffff',
      textStroke: $('textstroke').value.trim(),
      fontName: $('fontname').value.trim(),
      enableFontSize: $('enableFontSize').checked,
      enableFontColor: $('enableFontColor').checked,
      enableBgColor: $('enableBgColor').checked,
      enableTextStroke: $('enableTextStroke').checked,
      enableFontName: $('enableFontName').checked
    };
  }

  function setUIFromConfig(config) {
    $('selector').value = config.selector || '';
    $('fontsize').value = config.fontSize ?? 16;
    $('fontcolor').value = config.fontColor || '#000000';
    $('bgcolor').value = config.bgColor || '#ffffff';
    $('textstroke').value = config.textStroke || '';
    $('fontname').value = config.fontName || '';
    $('enableFontSize').checked = !!config.enableFontSize;
    $('enableFontColor').checked = !!config.enableFontColor;
    $('enableBgColor').checked = !!config.enableBgColor;
    $('enableTextStroke').checked = !!config.enableTextStroke;
    $('enableFontName').checked = !!config.enableFontName;
  }

  // ========== Events ==========
  toggleBtn.addEventListener('click', () => {
    panel.style.display = (panel.style.display === 'none' || panel.style.display === '') ? 'block' : 'none';
  });

  $('applyStyle').addEventListener('click', () => {
    const config = getUIConfig();
    applyStyle(config);
    if ($('saveDomain').checked) {
      localStorage.setItem(storageKey, JSON.stringify(config));
    } else {
      localStorage.removeItem(storageKey);
    }
  });

  $('exportConfig').addEventListener('click', () => {
    // Xu·∫•t c·∫•u h√¨nh hi·ªán t·∫°i tr√™n UI (k·ªÉ c·∫£ ch∆∞a l∆∞u)
    const config = getUIConfig();
    const json = JSON.stringify(config);
    prompt('Sao ch√©p JSON c·∫•u h√¨nh:', json);
  });

  $('importConfig').addEventListener('click', () => {
    const json = prompt('D√°n JSON c·∫•u h√¨nh v√†o ƒë√¢y:');
    if (!json) return;
    try {
      const config = JSON.parse(json);
      setUIFromConfig(config);
      applyStyle(config);
      $('saveDomain').checked = true;
      localStorage.setItem(storageKey, JSON.stringify(config));
      alert('ƒê√£ nh·∫≠p v√† √°p d·ª•ng c·∫•u h√¨nh.');
    } catch (e) {
      alert('JSON kh√¥ng h·ª£p l·ªá!');
    }
  });

  // ========== Load saved config ==========
  const saved = localStorage.getItem(storageKey);
  if (saved) {
    try {
      const config = JSON.parse(saved);
      setUIFromConfig(config);
      applyStyle(config);
      $('saveDomain').checked = true;
    } catch (e) {
      // N·∫øu l·ªói parse, b·ªè qua
    }
  }
})();
