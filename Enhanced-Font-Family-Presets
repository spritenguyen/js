// ==UserScript==
// @name         Font Manager Simple UI (Enhanced + Font Family Presets)
// @namespace    http://tampermonkey.net/
// @version      1.2
// @description  Qu·∫£n l√Ω c·ª° ch·ªØ, font-style, v√† font-family theo hostname; UI c·ªë ƒë·ªãnh; danh s√°ch cu·ªôn
// @author
// @match        *://*/*
// @grant        GM_getValue
// @grant        GM_setValue
// ==/UserScript==

(function () {
  'use strict';

  const KEY = 'fontSizes'; // Gi·ªØ key c≈© ƒë·ªÉ t∆∞∆°ng th√≠ch
  const host = location.hostname;
  let db = GM_getValue(KEY, {}); // { [hostname]: string | { size, style, family } }

  // ---------- Helpers ----------
  function getPrefsFor(v) {
    if (!v) return null;
    if (typeof v === 'string') return { size: v };
    if (typeof v === 'object') {
      return {
        size: v.size || '',
        style: v.style || '',
        family: v.family || ''
      };
    }
    return null;
  }

  function normalizeSize(val) {
    const v = String(val || '').trim();
    if (!v) return '';
    return /^\d+(\.\d+)?$/.test(v) ? v + 'px' : v;
  }

  function normalizeFontStyle(val) {
    const v = String(val || '').trim().toLowerCase();
    return ['normal', 'italic', 'oblique'].includes(v) ? v : '';
  }

  function normalizeFamily(val) {
    return String(val || '').trim();
  }

  // ---------- √Åp d·ª•ng style to√†n trang ----------
  let globalStyleEl = null;
  function ensureGlobalStyleEl() {
    if (!globalStyleEl) {
      globalStyleEl = document.createElement('style');
      globalStyleEl.id = 'fm_global_style';
      document.head.appendChild(globalStyleEl);
    }
    return globalStyleEl;
  }

  function buildCSSProps(prefs, includeLineHeight = true) {
    const props = [];
    if (prefs.size) {
      props.push(`font-size: ${prefs.size} !important`);
      if (includeLineHeight) props.push(`line-height: 1.4 !important`);
    }
    if (prefs.style) props.push(`font-style: ${prefs.style} !important`);
    if (prefs.family) props.push(`font-family: ${prefs.family} !important`);
    return props.join('; ') + (props.length ? ';' : '');
  }

  function applyFontPrefs(prefs) {
    if (!prefs) return;
    const s = ensureGlobalStyleEl();
    const baseProps = buildCSSProps(prefs, true);
    const pseudoProps = buildCSSProps(prefs, false);
    s.textContent = `
      *, *::before, *::after { ${baseProps} }
      input::placeholder, textarea::placeholder { ${pseudoProps} }
    `;
  }

  const currentPrefs = getPrefsFor(db[host]);
  if (currentPrefs) applyFontPrefs(currentPrefs);

  // ---------- UI v·ªõi Shadow DOM ƒë·ªÉ kh√¥ng b·ªã ·∫£nh h∆∞·ªüng b·ªüi thay ƒë·ªïi font to√†n trang ----------
  function mountUI() {
    const uiHost = document.createElement('div');
    Object.assign(uiHost.style, {
      position: 'fixed',
      bottom: '16px',
      right: '16px',
      zIndex: '2147483647',
      all: 'initial'
    });
    document.documentElement.appendChild(uiHost);

    const shadow = uiHost.attachShadow({ mode: 'open' });

    const style = document.createElement('style');
    style.textContent = `
      :host {
        all: initial;
        font: 14px/1.4 system-ui, -apple-system, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
        color: #111;
      }
      * { box-sizing: border-box; }
      .btn {
        position: fixed;
        bottom: 16px;
        right: 16px;
        padding: 8px 12px;
        background: #007bff;
        color: #fff;
        border-radius: 6px;
        border: none;
        cursor: pointer;
        font-weight: 700;
        font-size: 14px;
      }
      .panel {
        position: fixed;
        bottom: 64px;
        right: 16px;
        padding: 16px;
        background: #f4f4f4;
        border: 1px solid #ccc;
        border-radius: 10px;
        box-shadow: 0 4px 12px rgba(0,0,0,.3);
        min-width: 340px;
        display: none;
        font-size: 14px;
        color: #111;
      }
      .row { margin-top: 8px; }
      input, select, button { font: inherit; color: inherit; }
      input, select {
        width: 100%;
        padding: 6px 8px;
        border: 1px solid #bbb;
        border-radius: 6px;
        background: #fff;
      }
      .btn-small {
        margin-top: 6px;
        padding: 6px 10px;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        background: #eee;
      }
      .btn-primary { background: #007bff; color: #fff; }
      .btn-danger { background: #dc3545; color: #fff; }
      .label { font-weight: 600; }
      ul {
        padding-left: 18px;
        margin: 6px 0 0 0;
        list-style: disc;
        max-height: 72px; /* ~3 items */
        overflow-y: auto; /* thanh cu·ªôn d·ªçc n·∫øu >3 */
      }
      li { margin: 2px 0; }
      hr { margin: 10px 0; border: none; border-top: 1px solid #ddd; }
      .hint { color: #666; font-size: 12px; }
      .host { color: #007bff; font-weight: 700; }
      .row-inline-2 { display: grid; grid-template-columns: 1fr 1fr; gap: 8px; }
      .row-inline-3 { display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 8px; }
      .hidden { display: none; }
    `;
    shadow.appendChild(style);

    const container = document.createElement('div');
    container.innerHTML = `
      <button id="btn" class="btn" title="Qu·∫£n l√Ω font">üÖµ Font</button>
      <div id="panel" class="panel" part="panel">
        <div class="label">Qu·∫£n l√Ω c·ª° & ki·ªÉu ch·ªØ cho: <span class="host">${host}</span></div>

        <div class="row">
          <div class="label">C√†i ƒë·∫∑t cho trang hi·ªán t·∫°i</div>

          <div class="row-inline-3">
            <input id="fs_input" type="text" placeholder="c·ª° ch·ªØ (vd: 18px, 1.2em)">
            <select id="fs_style">
              <option value="">font-style (gi·ªØ nguy√™n)</option>
              <option value="normal">normal</option>
              <option value="italic">italic</option>
              <option value="oblique">oblique</option>
            </select>
            <select id="fs_family_select">
              <option value="">font-family (gi·ªØ nguy√™n)</option>
              <option value="Arial, sans-serif">Arial</option>
              <option value="Helvetica, Arial, sans-serif">Helvetica</option>
              <option value="'Times New Roman', serif">Times New Roman</option>
              <option value="Georgia, serif">Georgia</option>
              <option value="Verdana, sans-serif">Verdana</option>
              <option value="Tahoma, sans-serif">Tahoma</option>
              <option value="'Trebuchet MS', sans-serif">Trebuchet MS</option>
              <option value="'Courier New', monospace">Courier New</option>
              <option value="Consolas, 'Courier New', monospace">Consolas</option>
              <option value="'Roboto', sans-serif">Roboto</option>
              <option value="'Open Sans', sans-serif">Open Sans</option>
              <option value="'Inter', sans-serif">Inter</option>
              <option value="'Noto Sans', sans-serif">Noto Sans</option>
              <option value="'Noto Serif', serif">Noto Serif</option>
              <option value="'Source Sans Pro', sans-serif">Source Sans Pro</option>
              <option value="'Montserrat', sans-serif">Montserrat</option>
              <option value="'Lato', sans-serif">Lato</option>
              <option value="'Fira Code', monospace">Fira Code</option>
              <option value="custom">T√πy ch·ªânh...</option>
            </select>
          </div>

          <div class="row">
            <input id="fs_family_custom" class="hidden" type="text" placeholder='nh·∫≠p font-family tu·ª≥ ch·ªânh, vd: "Inter", Arial, sans-serif'>
          </div>

          <div class="row">
            <button id="fs_save" class="btn-small btn-primary">üíæ L∆∞u & √°p d·ª•ng</button>
            <button id="fs_delete" class="btn-small btn-danger">‚ùå Xo√°</button>
          </div>
        </div>

        <hr>

        <div class="row">
          <div class="label">Th√™m th·ªß c√¥ng</div>
          <input id="fs_host" type="text" placeholder="hostname (vd: vnexpress.net)" class="row">
          <div class="row-inline-3">
            <input id="fs_value" type="text" placeholder="c·ª° ch·ªØ (vd: 17px)">
            <select id="fs_value_style">
              <option value="">font-style</option>
              <option value="normal">normal</option>
              <option value="italic">italic</option>
              <option value="oblique">oblique</option>
            </select>
            <select id="fs_value_family_select">
              <option value="">font-family</option>
              <option value="Arial, sans-serif">Arial</option>
              <option value="Helvetica, Arial, sans-serif">Helvetica</option>
              <option value="'Times New Roman', serif">Times New Roman</option>
              <option value="Georgia, serif">Georgia</option>
              <option value="Verdana, sans-serif">Verdana</option>
              <option value="Tahoma, sans-serif">Tahoma</option>
              <option value="'Trebuchet MS', sans-serif">Trebuchet MS</option>
              <option value="'Courier New', monospace">Courier New</option>
              <option value="Consolas, 'Courier New', monospace">Consolas</option>
              <option value="'Roboto', sans-serif">Roboto</option>
              <option value="'Open Sans', sans-serif">Open Sans</option>
              <option value="'Inter', sans-serif">Inter</option>
              <option value="'Noto Sans', sans-serif">Noto Sans</option>
              <option value="'Noto Serif', serif">Noto Serif</option>
              <option value="'Source Sans Pro', sans-serif">Source Sans Pro</option>
              <option value="'Montserrat', sans-serif">Montserrat</option>
              <option value="'Lato', sans-serif">Lato</option>
              <option value="'Fira Code', monospace">Fira Code</option>
              <option value="custom">T√πy ch·ªânh...</option>
            </select>
          </div>

          <div class="row">
            <input id="fs_value_family_custom" class="hidden" type="text" placeholder='font-family tu·ª≥ ch·ªânh'>
          </div>

          <button id="fs_add" class="btn-small">‚ûï Th√™m trang</button>
          <div class="hint row">M·∫πo: N·∫øu ch·ªâ nh·∫≠p s·ªë (vd: 18) s·∫Ω t·ª± hi·ªÉu l√† px.</div>
        </div>

        <hr>

        <div class="label">Danh s√°ch ƒë√£ l∆∞u</div>
        <ul id="fs_list"></ul>
      </div>
    `;
    shadow.appendChild(container);

    // ---------- DOM helpers ----------
    const $ = (id) => shadow.getElementById(id);
    const btn = $('btn');
    const panel = $('panel');

    const fsFamilySelect = $('fs_family_select');
    const fsFamilyCustom = $('fs_family_custom');
    const fsValueFamilySelect = $('fs_value_family_select');
    const fsValueFamilyCustom = $('fs_value_family_custom');

    // Toggle hi·ªán/·∫©n input custom khi ch·ªçn "T√πy ch·ªânh..."
    function setupFamilyToggle(selectEl, customInputEl) {
      const update = () => {
        if (selectEl.value === 'custom') {
          customInputEl.classList.remove('hidden');
          customInputEl.focus();
        } else {
          customInputEl.classList.add('hidden');
        }
      };
      selectEl.addEventListener('change', update);
      update();
    }
    setupFamilyToggle(fsFamilySelect, fsFamilyCustom);
    setupFamilyToggle(fsValueFamilySelect, fsValueFamilyCustom);

    // Render list
    function renderList() {
      const ul = $('fs_list');
      ul.innerHTML = '';
      Object.entries(db).forEach(([k, v]) => {
        const p = getPrefsFor(v) || {};
        const parts = [];
        if (p.size) parts.push(p.size);
        if (p.style) parts.push(p.style);
        if (p.family) parts.push(p.family);
        const li = document.createElement('li');
        li.textContent = `${k}: ${parts.join(' | ') || '(ch∆∞a ƒë·∫∑t)'}`;
        ul.appendChild(li);
      });
    }

    // ƒêi·ªÅn d·ªØ li·ªáu hi·ªán t·∫°i
    function fillCurrent() {
      const p = getPrefsFor(db[host]) || {};
      $('fs_input').value = p.size || '';
      $('fs_style').value = p.style || '';

      // font-family select + custom
      const fam = p.family || '';
      const options = Array.from(fsFamilySelect.options).map(o => o.value);
      if (fam && options.includes(fam)) {
        fsFamilySelect.value = fam;
        fsFamilyCustom.value = '';
      } else if (fam) {
        fsFamilySelect.value = 'custom';
        fsFamilyCustom.value = fam;
      } else {
        fsFamilySelect.value = '';
        fsFamilyCustom.value = '';
      }
      // ensure toggle visibility
      fsFamilySelect.dispatchEvent(new Event('change'));
    }

    // Toggle panel
    btn.addEventListener('click', () => {
      panel.style.display = panel.style.display === 'none' ? 'block' : 'none';
      fillCurrent();
      renderList();
    });

    // L∆∞u & √°p d·ª•ng cho host hi·ªán t·∫°i
    $('fs_save').onclick = () => {
      const sizeVal = normalizeSize($('fs_input').value);
      const styleVal = normalizeFontStyle($('fs_style').value);

      let famVal = '';
      if (fsFamilySelect.value === 'custom') {
        famVal = normalizeFamily(fsFamilyCustom.value);
      } else {
        famVal = normalizeFamily(fsFamilySelect.value);
      }

      if (!sizeVal && !styleVal && !famVal) {
        alert('Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt thu·ªôc t√≠nh (c·ª° ch·ªØ / font-style / font-family).');
        return;
      }
      const newPrefs = {};
      if (sizeVal) newPrefs.size = sizeVal;
      if (styleVal) newPrefs.style = styleVal;
      if (famVal) newPrefs.family = famVal;

      db[host] = newPrefs;
      GM_setValue(KEY, db);
      applyFontPrefs(newPrefs);
      renderList();
    };

    // Xo√° c·∫•u h√¨nh host hi·ªán t·∫°i
    $('fs_delete').onclick = () => {
      delete db[host];
      GM_setValue(KEY, db);
      if (globalStyleEl) globalStyleEl.textContent = '';
      location.reload();
    };

    // Th√™m th·ªß c√¥ng host kh√°c
    $('fs_add').onclick = () => {
      let h = String($('fs_host').value || '').trim();
      h = h.replace(/^https?:\/\/(www\.)?/, '').split('/')[0]; // tr√≠ch hostname

      const v = normalizeSize($('fs_value').value);
      const s = normalizeFontStyle($('fs_value_style').value);

      let f = '';
      if (fsValueFamilySelect.value === 'custom') {
        f = normalizeFamily(fsValueFamilyCustom.value);
      } else {
        f = normalizeFamily(fsValueFamilySelect.value);
      }

      if (!h) return alert('Hostname ch∆∞a h·ª£p l·ªá.');
      if (!v && !s && !f) return alert('Vui l√≤ng nh·∫≠p c·ª° ch·ªØ / font-style / font-family.');

      const prefs = {};
      if (v) prefs.size = v;
      if (s) prefs.style = s;
      if (f) prefs.family = f;

      db[h] = prefs;
      GM_setValue(KEY, db);
      renderList();
      if (h === host) applyFontPrefs(prefs);
    };

    // Kh·ªüi t·∫°o
    renderList();
  }

  if (document.body) {
    mountUI();
  } else {
    document.addEventListener('DOMContentLoaded', mountUI, { once: true });
  }
})();
